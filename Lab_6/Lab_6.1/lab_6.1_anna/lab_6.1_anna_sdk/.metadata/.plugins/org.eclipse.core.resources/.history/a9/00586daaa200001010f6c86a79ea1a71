//mb_blink.c
//
//Provided boilerplate "LED Blink" code for ECE 385
//First released in ECE 385, Fall 2023 distribution
//
//Note: you will have to refer to the memory map of your MicroBlaze
//system to find the proper address for the LED GPIO peripheral.
//
//Modified on 7/25/23 Zuofu Cheng

#include <stdio.h>
#include <xparameters.h>
#include <xil_types.h>
#include <sleep.h>

#include "platform.h"

#include "xil_printf.h"


volatile uint32_t* input_gpio_data = (uint32_t*)0x40010000; // sw[15:0] and btn
volatile uint32_t* led_gpio_data = (uint32_t*)0x40000000;  //Hint: either find the manual address (via the memory map in the block diagram, or
// volatile means variable can change at any time			 //replace with the proper define in xparameters (part of the BSP). Either way
															 //this is the base address of the GPIO corresponding to your LEDs
															 //(similar to 0xFFFF from MEM2IO from previous labs).

int main()
{
    init_platform();

    *led_gpio_data &= ~0xFFFFFFFF; // set LED's to 0
    uint32_t accumulator = 0; //variable to store accumulator
    printf("Initialization complete\r\n");

	while (1+1 != 3)
	{
//		//////////// CODE FOR LED BLINK //////////////
//		sleep(1);
//		*led_gpio_data |=  0xFFFFFFFF;
//		printf("Led On!\r\n");
//		sleep(1);
//		*led_gpio_data &= ~0xFFFFFFFF; //blinks all LED
//		printf("Led Off!\r\n");


		/////////// CODE FOR ACCUMULATOR //////////
		if ((*input_gpio_data & 0x0001) != 0){ // check 16 bit and run accumulation
			while((*input_gpio_data & 0x0001) != 0){} //wait until falling edge to execute
			 accumulator += ((*input_gpio_data >> 1) & 0xFFFFF);
			 if (accumulator > 65535){ // if overflow reset
				 accumulator = accumulator - 65535;
				 printf("Accumulator Overflow\r\n");
			 }
//			 xil_printf("Accumulator Value: %u\r\n", *input_gpio_data);
			 xil_printf("Accumulator Value: %u\r\n", accumulator);
			 *led_gpio_data = accumulator;

			 printf("Update Value\r\n");
		}


	}

    cleanup_platform();

    return 0;
}
